analyzer:
  exclude:
    - "**/*.g.dart"
    - "**/*.freezed.dart"
    - "test/.test_coverage.dart"
    - "bin/cache/**"
    - "lib/generated_plugin_registrant.dart"

  # For more information see:
  # https://dart.dev/guides/language/analysis-options#enabling-additional-type-checks
  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true

  errors:
    # Treat missing returns as an error, not as a hint or a warning.
    missing_return: error

    # DON'T assign new values to parameters of methods or functions.
    # https://dart-lang.github.io/linter/lints/parameter_assignments.html
    parameter_assignments: warning

    # Allow having TODOs in the code.
    todo: ignore

# LINTER Preferences
#
# Explicitly disable only the rules we do not want.
linter:
  rules:
    prefer_const_constructors: true
    # By default, `catch`-block reacts on every type can be thrown,
    # which in fact isn't bound to Exception or Error types in Dart.
    # Thus, you have to put at least Exception as a bound and necessarily not a nullable type.
    avoid_catches_without_on_clauses: true # Always use an at least Exception type
    # Errors are not intended to be resolved within a running program.
    avoid_catching_errors: true
    # `dynamic` is a js-interop legacy which can introduce nasty things to a codebase and being easily avoidable.
    # Prefer cast or replacing to `Object?` at least.
    avoid_dynamic_calls: true
    # Using getter instead of immediate value setting introduces lazy loading of the value in memory.
    avoid_field_initializers_in_const_classes: true
    # Notice the `implements` keyword.
    # https://dart-lang.github.io/linter/lints/avoid_implementing_value_types.html
    avoid_implementing_value_types: true
    # In common, it messes original order of declarations.
    avoid_multiple_declarations_per_line: true
    # Positional boolean parameters are a bad practice because they are very ambiguous.
    # Using the named boolean parameters is much more readable
    # because it inherently describes what the boolean value represents.
    avoid_positional_boolean_parameters: true
    avoid_setters_without_getters: true
    # Notice what exact members are used by the lint.
    avoid_slow_async_io: true
    # Use analog that won't be erased when obfuscated. Do not use runtimeType to check!
    avoid_type_to_string: true
    no_runtimeType_toString: true
    # You should return Future<void>, not just void.
    # https://dart-lang.github.io/linter/lints/avoid_void_async.html
    avoid_void_async: true
    # You should always close subscriptions
    # https://dart-lang.github.io/linter/lints/cancel_subscriptions.html
    cancel_subscriptions: true
    # https://dart-lang.github.io/linter/lints/cascade_invocations.html
    cascade_invocations: true
    # You should check for nulls before casting to the other type
    cast_nullable_to_non_nullable: true
    # You should always close sinks.
    close_sinks: true
    conditional_uri_does_not_exist: true
    deprecated_consistency: true
    # https://dart-lang.github.io/linter/lints/join_return_with_assignment.html
    join_return_with_assignment: true
    # Can help if you accidentally wrote a condition that is always equal to true
    literal_only_boolean_expressions: true
    # Can help if you forgot about whitespace
    missing_whitespace_between_adjacent_strings: true
    no_adjacent_strings_in_list: true
    # Avoid cases when enum enhanced with a new value that are covered by `default`-case in some `switch`
    # that isn't intended to resolve such a case.
    # While still able to resolve it from an outside of a `switch`, you will also be warned
    # that the case is missing from switch.
    no_default_cases: true
    # In addition to bounded `catch`es, this forbids to `throw` any other than `Exception` or `Error`.
    only_throw_errors: true
    # Can help if you accidentally wrote `toInt` on an int type.
    noop_primitive_operations: true
    # All parameters are mutable by default, but you should not reassign them.
    parameter_assignments: true
    prefer_final_in_for_each: true
    require_trailing_commas: true
    prefer_single_quotes: true
    sized_box_shrink_expand: true
    sort_child_properties_last: true
    prefer_if_elements_to_conditional_expressions: true
    prefer_final_locals: true
    # You need to check what type is it, and only then call cast.
    test_types_in_equals: true
    # Avoid throw errors in finally block. This is not how to need to use try catch block.
    throw_in_finally: true
    # This allows the type system to catch problems rather than have them only be caught at run-time.
    # https://dart-lang.github.io/linter/lints/tighten_type_of_initializing_formals.html
    tighten_type_of_initializing_formals: true
    type_annotate_public_apis: true
    # Makes unawaited futures more noticeable to highlight that missing one's a plausible mistake.
    # unawaited(doSomething()); // Explicitly-ignored fire-and-forget.
    unawaited_futures: true
    unnecessary_await_in_return: true
    unnecessary_constructor_name: true
    unnecessary_lambdas: true
    unnecessary_statements: true
    # Do not use Container class for providing only color or decoration
    use_colored_box: true
    use_decorated_box: true
    use_if_null_to_convert_nulls_to_bools: true
    use_named_constants: true
    prefer_relative_imports: true